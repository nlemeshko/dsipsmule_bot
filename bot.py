import os
import logging
import telebot
from telebot import types
from dotenv import load_dotenv
import time
import random
import requests
import csv
import json
from datetime import datetime
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ALLOWED_GROUP_ID = int(os.getenv('ALLOWED_GROUP_ID'))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—É–∫–∞–∂–∏—Ç–µ user_id –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ .env)
ADMINS = os.getenv('ADMINS')
ADMIN_IDS = [int(uid) for uid in ADMINS.split(',') if uid.strip()]

# FSM: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –∞–Ω–æ–Ω–∏–º–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Å–Ω—é, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ
user_states = {}
ANON_STATE = 'anon_waiting_text'
SONG_STATE = 'song_waiting_text'
RATE_LINK_STATE = 'rate_waiting_link'
SONG_DAY_STATE = 'song_day_cooldown'
PROMOTE_STATE = 'promote_waiting_link'
last_song_day_time = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–º–æ –ø–µ—Ä–µ–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
pending_promotions = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
last_russong_time = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ Client-ID Imgur –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
IMGUR_CLIENT_ID = os.getenv('IMGUR_CLIENT_ID')

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /cat –∏ /meme
last_cat_time = {}
last_meme_time = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞
def load_hall_data():
    try:
        with open('hall.csv', 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            return list(reader)
    except FileNotFoundError:
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞
def save_hall_data(data):
    with open('hall.csv', 'w', encoding='utf-8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['category', 'name', 'nominated_by', 'date', 'votes'])
        writer.writeheader()
        writer.writerows(data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    if message.chat.type not in ['private']:
        return
    logging.info(f"/start –æ—Ç {message.from_user.username or message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("1. üïµ –ê–Ω–æ–Ω–∏–º–∫–∞", callback_data="button1"),
        types.InlineKeyboardButton("2. üé∂ –ü–µ—Å–Ω—è", callback_data="button2"),
        types.InlineKeyboardButton("3. üéß –û—Ü–µ–Ω–∏—Ç—å", callback_data="button3"),
        types.InlineKeyboardButton("4. üé≤ –ü–µ—Å–Ω—è –¥–Ω—è", callback_data="button4"),
        types.InlineKeyboardButton("5. üì¢ –ü—Ä–æ–º–æ", callback_data="button6")
    )
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: True)
def button_callback(call: types.CallbackQuery):
    if call.message.chat.type not in ['private']:
        return
    logging.info(f"–ö–Ω–æ–ø–∫–∞: {call.data} –æ—Ç {call.from_user.username or call.from_user.id} –≤ —á–∞—Ç–µ {call.message.chat.id}")
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    
    if call.data == "button1":
        user_states[user_id] = ANON_STATE
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ANON_STATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–∫–∏:"
        image_path = 'anon.png'
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response_text)
                logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–Ω–æ.")
            else:
                logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                bot.send_message(call.message.chat.id, response_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–Ω–æ: {e}")
            bot.send_message(call.message.chat.id, response_text)
    elif call.data == "button2":
        user_states[user_id] = SONG_STATE
        response_text = "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–¥—É—ç—Ç #—á–µ–ª–ª–µ–Ω–¥–∂ #–∫–ª–∞—Å—Å–∏–∫–∞):"
        image_path = 'sing.png'
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response_text)
                logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é.")
            else:
                logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                bot.send_message(call.message.chat.id, response_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é: {e}")
            bot.send_message(call.message.chat.id, response_text)
    elif call.data == "button3":
        user_states[user_id] = RATE_LINK_STATE
        response_text = "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ç—Ä–µ–∫ –≤ Smule:"
        image_path = 'rate.png'
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response_text)
                logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            else:
                logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                bot.send_message(call.message.chat.id, response_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {e}")
            bot.send_message(call.message.chat.id, response_text)
    elif call.data == "button4":
        user_id = call.from_user.id
        now = time.time()
        if user_id in last_song_day_time and now - last_song_day_time[user_id] < 60:
            logging.info(f"–ü–µ—Å–Ω—è –¥–Ω—è ‚Äî –ª–∏–º–∏—Ç –¥–ª—è {user_id}")
            bot.send_message(call.message.chat.id, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É!")
            return
        last_song_day_time[user_id] = now
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'
            }
            url = 'https://www.smule.com/api/profile/performances?accountId=96242367&appUid=sing&offset=0&limit=25'
            resp = requests.get(url, headers=headers, timeout=10)
            data = resp.json()
            songs = data.get('list', [])
            if not songs:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω —Å Smule API")
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω.")
                return
            song = random.choice(songs)
            title = song.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            artist = song.get('artist', '')
            web_url = song.get('web_url', '')
            cover_url = song.get('cover_url', '')
            msg = f"üé≤ –ü–µ—Å–Ω—è –¥–Ω—è:\n<b>{title}</b> ‚Äî {artist}\nhttps://www.smule.com{web_url}"
            logging.info(f"–ü–µ—Å–Ω—è –¥–Ω—è –¥–ª—è {user_id}: {title} ‚Äî {artist}")
            if cover_url:
                bot.send_photo(call.message.chat.id, cover_url, caption=msg, parse_mode='HTML')
            else:
                bot.send_message(call.message.chat.id, msg, parse_mode='HTML')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –¥–Ω—è: {e}")
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏: {e}")
    elif call.data == "button6":
        user_states[user_id] = PROMOTE_STATE
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø–∏–∞—Ä–∏—Ç—å:"
        image_path = 'piar.png'
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response_text)
                logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø–∏–∞—Ä—å –º–µ–Ω—è!.")
            else:
                logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø–∏–∞—Ä—å –º–µ–Ω—è!. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                bot.send_message(call.message.chat.id, response_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø–∏–∞—Ä—å –º–µ–Ω—è!: {e}")
            bot.send_message(call.message.chat.id, response_text)

@bot.message_handler(commands=['meme'])
def send_random_meme_command(message: types.Message):
    user_id = message.from_user.id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /meme
    if user_id in last_meme_time and now - last_meme_time[user_id] < 60:
        remaining_time = int(60 - (now - last_meme_time[user_id]))
        bot.reply_to(message, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –º–µ–º–∞.")
        return

    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /meme –æ—Ç {message.from_user.username or message.from_user.id}")
    meme_api_url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(meme_api_url, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()

        if data and data['success'] and data['data'] and data['data']['memes']:
            memes = data['data']['memes']
            random_meme = random.choice(memes)
            meme_url = random_meme['url']
            
            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ
                bot.send_photo(message.chat.id, meme_url)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º (Imgflip API): {meme_url}")
                last_meme_time[user_id] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {meme_url} (Imgflip API): {e}")
                bot.reply_to(message, f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º: {meme_url}')

        else:
            bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ –æ—Ç API.')
            logging.warning("Imgflip API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤")

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Imgflip API: {e}")
        bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Imgflip API.')
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Imgflip API –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Imgflip API.')

@bot.message_handler(commands=['prediction'])
def vocal_predictor(message: types.Message):
    logging.info(f"/prediction –≤ —á–∞—Ç–µ {message.chat.id} –æ—Ç {message.from_user.username or message.from_user.id}")
    prediction = get_random_vocal_prediction()
    
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        image_path = 'prediction.png' # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∏
                bot.send_photo(message.chat.id, photo, caption=f"üßô‚Äç‚ôÇÔ∏è –í–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å:\n{prediction}")
            logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º.")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            bot.reply_to(message, f"üßô‚Äç‚ôÇÔ∏è –í–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å:\n{prediction}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ prediction.png –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

@bot.message_handler(commands=['hall'])
def hall_command(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /hall –æ—Ç {message.from_user.username or message.from_user.id}")
    
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hall [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
            return
        
        category = args[1].lower()
        if category not in ['legend', 'cringe']:
            bot.reply_to(message, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'legend' –∏–ª–∏ 'cringe'")
            return
        
        nominee = args[2]
        nominator = message.from_user.username or f"id{message.from_user.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        hall_data = load_hall_data()
        for row in hall_data:
            if row['name'] == nominee and row['category'] == category:
                bot.reply_to(message, f"@{nominee} —É–∂–µ –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–º–∏–Ω–∞—Ü–∏—é
        new_nomination = {
            "category": category,
            "name": nominee,
            "nominated_by": nominator,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "votes": '1' # Votes are stored as string in CSV DictReader/Writer
        }
        hall_data.append(new_nomination)
        save_hall_data(hall_data)
        
        category_emoji = "üèÜ" if category == "legend" else "ü§¶"
        response_text = (
            f"{category_emoji} –ù–æ–≤–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {'–õ–µ–≥–µ–Ω–¥–∞' if category == 'legend' else '–ö—Ä–∏–Ω–∂'}\n"
            f"–ù–æ–º–∏–Ω–∞–Ω—Ç: {nominee}\n"
            f"–ù–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª: {nominator}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'hall.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=response_text)
            logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hall.")
        else:
            logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hall. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            bot.reply_to(message, response_text)

        logging.info(f"–ù–æ–º–∏–Ω–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {response_text}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /hall: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")

@bot.message_handler(commands=['halllist'])
def hall_list(message: types.Message):
    try:
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /halllist –æ—Ç {message.from_user.username or message.from_user.id}")
        
        hall_data = load_hall_data()
        
        legends = []
        cringe = []
        
        for row in hall_data:
            if row['category'] == 'legend':
                legends.append(row)
            else:
                cringe.append(row)
        
        legends_text = "üèÜ –õ–µ–≥–µ–Ω–¥—ã:\n"
        for entry in legends:
            legends_text += f"‚Ä¢ {entry['name']} (–æ—Ç {entry['nominated_by']}, {entry['votes']} –≥–æ–ª–æ—Å–æ–≤)\n"
        
        cringe_text = "\nü§¶ –ö—Ä–∏–Ω–∂:\n"
        for entry in cringe:
            cringe_text += f"‚Ä¢ {entry['name']} (–æ—Ç {entry['nominated_by']}, {entry['votes']} –≥–æ–ª–æ—Å–æ–≤)\n"
        
        response_text = legends_text + cringe_text

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'halllist.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=response_text)
            logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /halllist.")
        else:
            logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /halllist. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            bot.reply_to(message, response_text)
        
        logging.info(f"–°–ø–∏—Å–æ–∫ –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response_text}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /halllist: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

@bot.message_handler(commands=['vote'])
def vote_command(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /vote –æ—Ç {message.from_user.username or message.from_user.id}")
    
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vote [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
            return
        
        category = args[1].lower()
        if category not in ['legend', 'cringe']:
            bot.reply_to(message, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'legend' –∏–ª–∏ 'cringe'")
            return
        
        nominee = args[2]
        voter = message.from_user.username or f"id{message.from_user.id}"
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        hall_data = load_hall_data()
        
        # –ò—â–µ–º –Ω–æ–º–∏–Ω–∞—Ü–∏—é
        found = False
        for row in hall_data:
            if row['name'] == nominee and row['category'] == category:
                row['votes'] = str(int(row['votes']) + 1) # Ensure votes remain string for CSV
                found = True
                break
        
        if not found:
            bot.reply_to(message, f"–ù–æ–º–∏–Ω–∞—Ü–∏—è –¥–ª—è @{nominee} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_hall_data(hall_data)
        
        category_emoji = "üèÜ" if category == "legend" else "ü§¶"
        response_text = f"{category_emoji} –í–∞—à –≥–æ–ª–æ—Å –∑–∞ @{nominee} —É—á—Ç–µ–Ω!"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'vote.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=response_text)
            logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /vote.")
        else:
            logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /vote. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            bot.reply_to(message, response_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /vote: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {e}")

def get_random_russian_song():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–ª—é—á
        lastfm_api_key = "b25b959554ed76058ac220b7b2e0a026"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ tag.gettoptracks —Å —Ç–µ–≥–æ–º 'russian'
        url = f"http://ws.audioscrobbler.com/2.0/?method=tag.gettoptracks&tag=russian&api_key={lastfm_api_key}&format=json&limit=100"
        response = requests.get(url, timeout=10)
        data = response.json()

        if 'tracks' not in data or 'track' not in data['tracks']:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Last.fm API (tag.getTopTracks/russian)")
            logging.error(f"–û—Ç–≤–µ—Ç API: {data}")
            return None, None, None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        tracks = data['tracks']['track']
        if not tracks:
            return None, None, None

        track = random.choice(tracks)
        title = track['name']
        artist = track['artist']['name']
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
        track_url = track['url']

        return title, artist, track_url

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ —Å Last.fm (tag.getTopTracks/russian): {e}")
        return None, None, None

@bot.message_handler(commands=['random'])
def russian_song_command(message: types.Message):
    user_id = message.from_user.id
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_id in last_russong_time and now - last_russong_time[user_id] < 60:
        remaining_time = int(60 - (now - last_russong_time[user_id]))
        bot.reply_to(message, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /random –æ—Ç {message.from_user.username or message.from_user.id}")
    
    title, artist, link = get_random_russian_song()
    if not title:
        bot.reply_to(message, "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    last_russong_time[user_id] = now
        
    response = (
        f"üéµ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è:\n\n"
        f"<b>{title}</b>\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ Last.fm:\n{link}"
    )
    bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['cat'])
def cat_command(message: types.Message):
    user_id = message.from_user.id
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /cat
    if user_id in last_cat_time and now - last_cat_time[user_id] < 60:
        remaining_time = int(60 - (now - last_cat_time[user_id]))
        bot.reply_to(message, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ—Ç–∏–∫–∞.")
        return
        
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /cat –æ—Ç {message.from_user.username or message.from_user.id}")
    
    try:
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        cat_api_url = "http://theoldreader.com/kittens/600/400"
        
        response = requests.get(cat_api_url, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        if response.status_code == 200 and 'image' in response.headers.get('Content-Type', ''):
            bot.send_photo(message.chat.id, response.content)
            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {message.chat.id}")
            last_cat_time[user_id] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}, Content-Type: {response.headers.get('Content-Type')}")
            bot.reply_to(message, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cat: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")

@bot.message_handler(commands=['casino'])
def casino_command(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /casino –æ—Ç {message.from_user.username or message.from_user.id}")
    
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ª–æ—Ç–æ–≤ –∏–∑ –ø–∞–∫–µ—Ç–∞ DMJSlotMachine2
    symbols = ['üçí', 'üçä', 'üçã', 'üçá', '7Ô∏è‚É£']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
    result = [random.choice(symbols) for _ in range(3)]
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
    bot.reply_to(message, f"üé∞ {' '.join(result)} üé∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    if all(x == result[0] for x in result):
        # 10% —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
        if random.random() < 0.1:
            win_message = (
                f"{'üéâ' * 10}\n"
                f"–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–ë–ï–î–û–ô! üéä\n"
                f"{'üéâ' * 10}"
            )
            bot.send_message(message.chat.id, win_message)
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–∞–ª 10% —à–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            bot.send_message(message.chat.id, "–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
    else:
        bot.send_message(message.chat.id, "–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

@bot.message_handler(commands=['help'])
def help_command(message: types.Message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/prediction - –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/hall [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] - –ù–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ó–∞–ª —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞\n"
        "/halllist - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏ –ó–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞\n"
        "/vote [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] - –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω–æ–º–∏–Ω–∞–Ω—Ç–∞\n"
        "/random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä—É—Å—Å–∫—É—é –ø–µ—Å–Ω—é —Å Last.fm\n"
        "/cat - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞\n"
        "/meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "/casino - –ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (/start) –≤ –æ–±—â–µ–Ω–∏–∏ —Å @dsipsmule_bot:\n"
        "üïµ –ê–Ω–æ–Ω–∏–º–∫–∞\n"
        "üé∂ –ü–µ—Å–Ω—è\n"
        "üéß –û—Ü–µ–Ω–∏—Ç—å\n"
        "üé≤ –ü–µ—Å–Ω—è –¥–Ω—è\n"
        "üì¢ –ü—Ä–æ–º–æ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
    image_path = 'help.png'
    if os.path.exists(image_path):
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=help_text)
        logging.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help.")
    else:
        logging.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
        bot.reply_to(message, help_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    logging.info(f"[handle_message start] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}. Chat ID: {message.chat.id}. Content Type: {message.content_type}")
    
    if message.chat.type not in ['private']:
        return
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}. –¢–∏–ø: {message.content_type}")
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_states.get(user_id)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏
    if message.text:
        logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        emoji_list = [char for char in message.text if ord(char) > 127]
        if emoji_list:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {emoji_list}")
    
    # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    known_commands = [
        '/start', '/prediction', '/hall', '/halllist', '/vote',
        '/random', '/cat', '/meme', '/help', '/casino'
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –Ω–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π
    if message.text and message.text.startswith('/'):
        command = message.text.split()[0] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if command not in known_commands:
            logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ handle_message –æ—Ç {message.from_user.username or message.from_user.id}: {message.text}")
            bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
            return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        # handle_message –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –µ–µ –¥–∞–ª—å—à–µ, —á—Ç–æ –∏ –Ω—É–∂–Ω–æ.

    # FSM: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–Ω–æ–Ω–∏–º–∫—É
    if user_states.get(user_id) == ANON_STATE:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ ANON_STATE. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        if message.text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            text = message.text.strip()
            anon_text = f"{text}\n\n#–∞–Ω–æ–Ω"
            for admin_id in ADMIN_IDS:
                bot.send_message(admin_id, f"–ù–æ–≤–∞—è –∞–Ω–æ–Ω–∏–º–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n{anon_text}\n\n")
            logging.info(f"–ê–Ω–æ–Ω–∏–º–∫–∞ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            user_states.pop(user_id, None)
            return
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–∫–∏, –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã.
        # –ï—Å–ª–∏ –∏ —Ç–∞–º –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è (—Ç.–µ. –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –≥–æ–ª–æ—Å), —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç else –Ω–∏–∂–µ.
        # pass # –ü–æ–∑–≤–æ–ª–∏—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–∞–±–æ—Ç–∞—Ç—å

@bot.message_handler(content_types=['photo'])
def handle_anon_photo(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) == ANON_STATE:
        logging.info(f"[handle_anon_photo] –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç {user_id} –≤ ANON_STATE.")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –±–æ–ª—å—à—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
        caption = message.caption or ""
        anon_text = f"{caption}\n\n#–∞–Ω–æ–Ω" if caption else "#–∞–Ω–æ–Ω"
        try:
            for admin_id in ADMIN_IDS:
                bot.send_photo(admin_id, photo_id, caption=anon_text)
            logging.info(f"–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        except Exception as e:
            logging.error(f"[handle_anon_photo] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞–º: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        user_states.pop(user_id, None)
        return
    # else: # –ï—Å–ª–∏ –Ω–µ –≤ ANON_STATE, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–æ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ñ–æ—Ç–æ
    #     pass

@bot.message_handler(content_types=['voice'])
def handle_anon_voice(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) == ANON_STATE:
        logging.info(f"[handle_anon_voice] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ ANON_STATE.")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        voice_id = message.voice.file_id
        caption = message.caption or ""
        anon_text = f"{caption}\n\n#–∞–Ω–æ–Ω" if caption else "#–∞–Ω–æ–Ω"
        try:
            for admin_id in ADMIN_IDS:
                bot.send_voice(admin_id, voice_id, caption=anon_text)
            logging.info(f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        except Exception as e:
            logging.error(f"[handle_anon_voice] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        user_states.pop(user_id, None)
        return

@bot.message_handler(content_types=['sticker'])
def handle_sticker(message: types.Message):
    sticker_id = message.sticker.file_id
    emoji = message.sticker.emoji
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä —Å file_id: {sticker_id}, —ç–º–æ–¥–∑–∏: {emoji}")
    bot.reply_to(message, f"File ID —Å—Ç–∏–∫–µ—Ä–∞: {sticker_id}\n–≠–º–æ–¥–∑–∏: {emoji}")

@bot.message_handler(content_types=['dice'])
def handle_dice(message: types.Message):
    dice_id = message.dice.file_id
    emoji = message.dice.emoji
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏ (Dice) —Å file_id: {dice_id}, —ç–º–æ–¥–∑–∏: {emoji}")
    bot.reply_to(message, f"File ID –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏: {dice_id}\n–≠–º–æ–¥–∑–∏: {emoji}")

    # FSM: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Å–Ω—é
    if user_states.get(user_id) == SONG_STATE:
        text = message.text.strip()
        if len(text) > 500:
            bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        user_info = f"@{message.from_user.username}" if message.from_user.username else f"id: {user_id}"
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Å–Ω–∏:\n\n{text}\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        logging.info(f"–ü–µ—Å–Ω—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ {user_id}")
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        user_states.pop(user_id, None)
        return
    # FSM: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    if user_states.get(user_id) == RATE_LINK_STATE:
        link = message.text.strip()
        if not (link.startswith("http://") or link.startswith("https://")):
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.")
            return
        user_info = f"@{message.from_user.username}" if message.from_user.username else f"id: {user_id}"
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n–°—Å—ã–ª–∫–∞: {link}\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        logging.info(f"–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ {user_id}")
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        user_states.pop(user_id, None)
        return
    # FSM: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–º–æ
    if user_states.get(user_id) == PROMOTE_STATE:
        track_link = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
        if not (track_link.startswith("http://") or track_link.startswith("https://")):
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.")
            return

        user_info = f"@{message.from_user.username}" if message.from_user.username else f"id: {message.from_user.id}"
        request_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
        pending_promotions[request_id] = {
            "user_id": message.from_user.id,
            "user_info": user_info,
            "track_link": track_link
        }

        # –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message_text = (
            f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–º–æ –æ—Ç {user_info}:\n\n"
            f"–¢—Ä–µ–∫: {track_link}\n\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–±–µ–∑ –∫–Ω–æ–ø–∫–∏)
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(admin_id, admin_message_text)
            except Exception as admin_e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")
            
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–º–æ –æ—Ç {user_info} (ID: {request_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        user_states.pop(user_id, None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        return # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç {user_id} –≤ —á–∞—Ç–µ {message.chat.id}")
    bot.reply_to(message, "–Ø –≤–∞—Å —Å–ª—É—à–∞—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

def get_random_vocal_prediction():
    try:
        with open('vocal.csv', encoding='utf-8') as f:
            reader = list(csv.reader(f))
            if not reader:
                return "üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."
            row = random.choice(reader)
            return row[0] if row else "üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è vocal.csv: {e}")
        return "üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not ALLOWED_GROUP_ID:
        logging.error("ALLOWED_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.infinity_polling()

if __name__ == '__main__':
    main() 