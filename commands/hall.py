#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞: /hall, /halllist, /vote
"""

import os
import csv
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞
def load_hall_data():
    try:
        with open('data/hall.csv', 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            return list(reader)
    except FileNotFoundError:
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞
def save_hall_data(data):
    with open('data/hall.csv', 'w', encoding='utf-8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['category', 'name', 'nominated_by', 'date', 'votes'])
        writer.writeheader()
        writer.writerows(data)

async def hall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hall"""
    hall_data = load_hall_data()
    
    try:
        args = update.message.text.split(maxsplit=2)
        if len(args) < 3:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hall [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
            return
        
        category = args[1].lower()
        if category not in ['legend', 'cringe']:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'legend' –∏–ª–∏ 'cringe'")
            return
        
        nominee = args[2]
        nominator = update.effective_user.username or f"id{update.effective_user.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        for row in hall_data:
            if row['name'] == nominee and row['category'] == category:
                await update.message.reply_text(f"@{nominee} —É–∂–µ –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–º–∏–Ω–∞—Ü–∏—é
        new_nomination = {
            "category": category,
            "name": nominee,
            "nominated_by": nominator,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "votes": '1'
        }
        hall_data.append(new_nomination)
        save_hall_data(hall_data)
        
        category_emoji = "üèÜ" if category == "legend" else "ü§¶"
        response_text = (
            f"{category_emoji} –ù–æ–≤–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {'–õ–µ–≥–µ–Ω–¥–∞' if category == 'legend' else '–ö—Ä–∏–Ω–∂'}\n"
            f"–ù–æ–º–∏–Ω–∞–Ω—Ç: {nominee}\n"
            f"–ù–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª: {nominator}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'images/hall.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo, 
                    caption=response_text
                )
            print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hall.")
        else:
            print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hall. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç.")
            await update.message.reply_text(response_text)

        print(f"–ù–æ–º–∏–Ω–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {response_text}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /hall: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")

async def halllist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /halllist"""
    hall_data = load_hall_data()
    
    try:
        print(f"–ö–æ–º–∞–Ω–¥–∞ /halllist –æ—Ç {update.effective_user.username or update.effective_user.id}")
        
        legends = []
        cringe = []
        
        for row in hall_data:
            if row['category'] == 'legend':
                legends.append(row)
            else:
                cringe.append(row)
        
        legends_text = "üèÜ –õ–µ–≥–µ–Ω–¥—ã:\n"
        for entry in legends:
            legends_text += f"‚Ä¢ {entry['name']} (–æ—Ç {entry['nominated_by']}, {entry['votes']} –≥–æ–ª–æ—Å–æ–≤)\n"
        
        cringe_text = "\nü§¶ –ö—Ä–∏–Ω–∂:\n"
        for entry in cringe:
            cringe_text += f"‚Ä¢ {entry['name']} (–æ—Ç {entry['nominated_by']}, {entry['votes']} –≥–æ–ª–æ—Å–æ–≤)\n"
        
        response_text = legends_text + cringe_text

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'images/halllist.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await update.message.reply_photo(photo, caption=response_text)
            print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /halllist.")
        else:
            print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /halllist. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            await update.message.reply_text(response_text)
        
        print(f"–°–ø–∏—Å–æ–∫ –∑–∞–ª–∞ —Å–ª–∞–≤—ã/–ø–æ–∑–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response_text}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /halllist: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

async def vote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vote"""
    hall_data = load_hall_data()
    
    try:
        args = update.message.text.split(maxsplit=2)
        if len(args) < 3:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vote [legend/cringe] [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
            return
        
        category = args[1].lower()
        if category not in ['legend', 'cringe']:
            await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'legend' –∏–ª–∏ 'cringe'")
            return
        
        nominee = args[2]
        voter = update.effective_user.username or f"id{update.effective_user.id}"
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        hall_data = load_hall_data()
        
        # –ò—â–µ–º –Ω–æ–º–∏–Ω–∞—Ü–∏—é
        found = False
        for row in hall_data:
            if row['name'] == nominee and row['category'] == category:
                row['votes'] = str(int(row['votes']) + 1)
                found = True
                break
        
        if not found:
            await update.message.reply_text(f"–ù–æ–º–∏–Ω–∞—Ü–∏—è –¥–ª—è @{nominee} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_hall_data(hall_data)
        
        category_emoji = "üèÜ" if category == "legend" else "ü§¶"
        response_text = f"{category_emoji} –í–∞—à –≥–æ–ª–æ—Å –∑–∞ @{nominee} —É—á—Ç–µ–Ω!"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_path = 'images/vote.png'
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await update.message.reply_photo(update.message.chat.id, photo, caption=response_text)
            print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /vote.")
        else:
            print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /vote. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            await update.message.reply_text(response_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /vote: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {e}")
