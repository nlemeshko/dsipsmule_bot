#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
"""

import os
import time
import random
import requests
from telegram import Update, CallbackQuery
from telegram.ext import ContextTypes

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
ANON_STATE = 'anon_waiting_text'
SONG_STATE = 'song_waiting_text'
RATE_LINK_STATE = 'rate_waiting_link'
PROMOTE_STATE = 'promote_waiting_link'

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
last_song_day_time = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    
    print(f"Callback query received: {query.data} from user {query.from_user.username or query.from_user.id} in chat {chat_id}")
    
    if query.data == "button1":
        # –ê–Ω–æ–Ω–∏–º–∫–∞
        user_states[user_id] = ANON_STATE
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ANON_STATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–∫–∏:"
        image_path = 'images/anon.png'
        
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id, photo, caption=response_text)
                print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–∫–∞.")
            else:
                print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–∫–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                await context.bot.send_message(chat_id, response_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–Ω–æ–Ω–∏–º–∫–∞: {e}")
            await context.bot.send_message(chat_id, response_text)
            
    elif query.data == "button2":
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é
        user_states[user_id] = SONG_STATE
        response_text = "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–¥—É—ç—Ç #—á–µ–ª–ª–µ–Ω–¥–∂ #–∫–ª–∞—Å—Å–∏–∫–∞):"
        image_path = 'images/sing.png'
        
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id, photo, caption=response_text)
                print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é.")
            else:
                print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                await context.bot.send_message(chat_id, response_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é: {e}")
            await context.bot.send_message(chat_id, response_text)
            
    elif query.data == "button3":
        # –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        user_states[user_id] = RATE_LINK_STATE
        response_text = "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ç—Ä–µ–∫ –≤ Smule:"
        image_path = 'images/rate.png'
        
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id, photo, caption=response_text)
                print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            else:
                print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                await context.bot.send_message(chat_id, response_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {e}")
            await context.bot.send_message(chat_id, response_text)
            
    elif query.data == "button4":
        # –ü–µ—Å–Ω—è –¥–Ω—è
        now = time.time()
        if user_id in last_song_day_time and now - last_song_day_time[user_id] < 5:
            print(f"–ü–µ—Å–Ω—è –¥–Ω—è ‚Äî –ª–∏–º–∏—Ç –¥–ª—è {user_id}")
            await context.bot.send_message(chat_id, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 5 —Å–µ–∫—É–Ω–¥!")
            return
        last_song_day_time[user_id] = now
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'
            }
            url = 'https://www.smule.com/api/profile/performances?accountId=96242367&appUid=sing&offset=0&limit=25'
            resp = requests.get(url, headers=headers, timeout=10)
            data = resp.json()
            songs = data.get('list', [])
            if not songs:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω —Å Smule API")
                await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω.")
                return
            song = random.choice(songs)
            title = song.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            artist = song.get('artist', '')
            web_url = song.get('web_url', '')
            cover_url = song.get('cover_url', '')
            msg = f"üé≤ –ü–µ—Å–Ω—è –¥–Ω—è:\n<b>{title}</b> ‚Äî {artist}\nhttps://www.smule.com{web_url}"
            print(f"–ü–µ—Å–Ω—è –¥–Ω—è –¥–ª—è {user_id}: {title} ‚Äî {artist}")
            if cover_url:
                await context.bot.send_photo(chat_id, cover_url, caption=msg, parse_mode='HTML')
            else:
                await context.bot.send_message(chat_id, msg, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –¥–Ω—è: {e}")
            await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏: {e}")
            
    elif query.data == "button6":
        # –ü—Ä–æ–º–æ
        user_states[user_id] = PROMOTE_STATE
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø–∏–∞—Ä–∏—Ç—å:"
        image_path = 'images/piar.png'
        
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id, photo, caption=response_text)
                print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–º–æ.")
            else:
                print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–º–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
                await context.bot.send_message(chat_id, response_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–º–æ: {e}")
            await context.bot.send_message(chat_id, response_text)
