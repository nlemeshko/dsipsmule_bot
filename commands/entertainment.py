#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π: /random, /cat, /meme, /casino
"""

import os
import time
import random
import requests
from telegram import Update
from telegram.ext import ContextTypes

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
last_russong_time = {}
last_cat_time = {}
last_meme_time = {}
last_casino_time = {}

def get_random_russian_song():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä—É—Å—Å–∫—É—é –ø–µ—Å–Ω—é —Å Last.fm"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–ª—é—á
        lastfm_api_key = "b25b959554ed76058ac220b7b2e0a026"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ tag.gettoptracks —Å —Ç–µ–≥–æ–º 'russian'
        url = f"http://ws.audioscrobbler.com/2.0/?method=tag.gettoptracks&tag=russian&api_key={lastfm_api_key}&format=json&limit=100"
        response = requests.get(url, timeout=10)
        data = response.json()

        if 'tracks' not in data or 'track' not in data['tracks']:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Last.fm API (tag.getTopTracks/russian)")
            print(f"–û—Ç–≤–µ—Ç API: {data}")
            return None, None, None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        tracks = data['tracks']['track']
        if not tracks:
            return None, None, None

        track = random.choice(tracks)
        title = track['name']
        artist = track['artist']['name']
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
        track_url = track['url']

        return title, artist, track_url

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ —Å Last.fm (tag.getTopTracks/russian): {e}")
        return None, None, None

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /random
    user_id = update.effective_user.id
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_id in last_russong_time and now - last_russong_time[user_id] < 5:
        remaining_time = int(5 - (now - last_russong_time[user_id]))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    
    print(f"–ö–æ–º–∞–Ω–¥–∞ /random –æ—Ç {update.effective_user.username or update.effective_user.id}")
    
    title, artist, link = get_random_russian_song()
    if not title:
        await update.message.reply_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    last_russong_time[user_id] = now
        
    response = (
        f"üéµ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è:\n\n"
        f"<b>{title}</b>\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ Last.fm:\n{link}"
    )
    await update.message.reply_text(response, parse_mode='HTML')

async def cat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat"""
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cat
    user_id = update.effective_user.id
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /cat
    if user_id in last_cat_time and now - last_cat_time[user_id] < 5:
        remaining_time = int(5 - (now - last_cat_time[user_id]))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ—Ç–∏–∫–∞.")
        return
        
    print(f"–ö–æ–º–∞–Ω–¥–∞ /cat –æ—Ç {update.effective_user.username or update.effective_user.id}")
    
    try:
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞
        cat_api_url = "https://cataas.com/cat"
        
        response = requests.get(cat_api_url, timeout=15)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        if response.status_code == 200 and 'image' in response.headers.get('Content-Type', ''):
            await update.message.reply_photo(response.content, reply_to_message_id=update.message.message_id)
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {update.message.chat.id} –∫–∞–∫ –æ—Ç–≤–µ—Ç.")
            last_cat_time[user_id] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}, Content-Type: {response.headers.get('Content-Type')}")
            await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cat: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")

async def meme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /meme"""
    user_id = update.effective_user.id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /meme
    if user_id in last_meme_time and now - last_meme_time[user_id] < 5:
        remaining_time = int(5 - (now - last_meme_time[user_id]))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –º–µ–º–∞.")
        return

    print(f"–ö–æ–º–∞–Ω–¥–∞ /meme –æ—Ç {update.effective_user.username or update.effective_user.id}")
    meme_api_url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(meme_api_url, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()

        if data and data['success'] and data['data'] and data['data']['memes']:
            memes = data['data']['memes']
            random_meme = random.choice(memes)
            meme_url = random_meme['url']
            
            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ
                await update.message.reply_photo(meme_url, reply_to_message_id=update.message.message_id)
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º (Imgflip API): {meme_url}")
                last_meme_time[user_id] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {meme_url} (Imgflip API): {e}")
                await update.message.reply_text(f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º: {meme_url}')

        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ –æ—Ç API.')
            print("Imgflip API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤")

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Imgflip API: {e}")
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Imgflip API.')
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Imgflip API –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Imgflip API.')

async def casino_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /casino"""
    user_id = update.effective_user.id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è /casino
    if user_id in last_casino_time and now - last_casino_time[user_id] < 5:
        remaining_time = int(5 - (now - last_casino_time[user_id]))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º –∫–∞–∑–∏–Ω–æ.")
        return

    print(f"–ö–æ–º–∞–Ω–¥–∞ /casino –æ—Ç {update.effective_user.username or update.effective_user.id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    last_casino_time[user_id] = now

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    image_path = 'images/casino.png'
    if os.path.exists(image_path):
        with open(image_path, 'rb') as photo:
            await update.message.reply_photo(photo, reply_to_message_id=update.message.message_id)
        print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {image_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /casino –∫–∞–∫ –æ—Ç–≤–µ—Ç.")
    else:
        print(f"–§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /casino. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã.")

    # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ª–æ—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –≤—Å–µ —ç–º–æ–¥–∑–∏)
    symbols = [
        'ü§û', # –≠–º–æ–¥–∑–∏ —Ü–∏—Ñ—Ä—ã 7
        '‚úåÔ∏è' # –≠–º–æ–¥–∑–∏ Squared B (–≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ BAR)
    ]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
    result_symbols = [random.choice(symbols) for _ in range(3)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for symbol in result_symbols:
        try:
            await update.message.reply_text(symbol, reply_to_message_id=update.message.message_id)
            time.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–º–≤–æ–ª–∞ –∫–∞–∑–∏–Ω–æ {symbol}: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    if all(x == result_symbols[0] for x in result_symbols):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
        win_emoji = 'üéâ' # –≠–º–æ–¥–∑–∏ —Ö–ª–æ–ø—É—à–∫–∏
        try:
            await update.message.reply_text("–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–ë–ï–î–û–ô! üéâ", reply_to_message_id=update.message.message_id)
            await update.message.reply_text(win_emoji, reply_to_message_id=update.message.message_id)
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏: {e}")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
        lose_emoji = 'üò¢' # –≠–º–æ–¥–∑–∏ –ø–µ—á–∞–ª—å–Ω–æ–≥–æ –ª–∏—Ü–∞
        try:
            await update.message.reply_text("–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", reply_to_message_id=update.message.message_id)
            await update.message.reply_text(lose_emoji, reply_to_message_id=update.message.message_id)
        except Exception as e:
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —ç–º–æ–¥–∑–∏: {e}")
